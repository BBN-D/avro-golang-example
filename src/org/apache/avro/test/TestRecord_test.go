/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package test;

import (
	"math/rand"
	"encoding/json"
	"reflect"
	"testing"
)

// ignore import errors
var _ = rand.Intn(4)

func roundTripTestRecord(t *testing.T, original *TestRecord, pass string) (*TestRecord) {

	bytes, err := original.ToAvroContainer()
	if err != nil {
		t.Fatal("Error serializing TestRecord (" + pass + "): " + err.Error())
	}
	
	cloned, err := TestRecordFromAvroContainer(bytes)
	if err != nil {
		t.Fatal("Error deserializing TestRecord (" + pass + "): " + err.Error())
	}
	
	// compare the json output
	originalJson, _ := json.Marshal(original)
	clonedJson, _ := json.Marshal(cloned[0])
	
	if !reflect.DeepEqual(originalJson, clonedJson) {
		t.Logf("Original: %s", string(originalJson))
		t.Logf("Cloned:   %s", string(clonedJson))
		t.Fatal("Cloned  TestRecord is not equivalent to original (" + pass + ")")
	}

	return cloned[0].(*TestRecord)
}


// creates a valid TestRecord
func genRandomTestRecord(runNumber int) (*TestRecord) {
	var original *TestRecord
	obj := new(TestRecord)
	
	obj.Name = "random string"
	obj.Kind.Value = 0
	obj_hash := new(MD5)
	obj_hash.Bytes = make([]byte, 16)
	for obj_hash_i := 0; obj_hash_i < 16; obj_hash_i++ {
		obj_hash.Bytes[obj_hash_i] = byte(obj_hash_i)
	}
	obj.Hash = obj_hash
	
	switch runNumber % 2 {
	case 0:
		obj.NullableHash = nil
	
	case 1:
		obj_nullableHash := new(MD5)
		obj_nullableHash.Bytes = make([]byte, 16)
		for obj_nullableHash_i := 0; obj_nullableHash_i < 16; obj_nullableHash_i++ {
			obj_nullableHash.Bytes[obj_nullableHash_i] = byte(obj_nullableHash_i)
		}
		obj.NullableHash = obj_nullableHash
	
	}
	
	obj.Value = rand.Float64()
	obj.Average = rand.Float32()

	original = obj

	return original
}

func TestTestRecord_0(t *testing.T) {
	original := genRandomTestRecord(0)
	roundTripTestRecord(t, roundTripTestRecord(t, original, "run 0, pass 0"), "run 0, pass 1")
}

func TestTestRecord_1(t *testing.T) {
	original := genRandomTestRecord(1)
	roundTripTestRecord(t, roundTripTestRecord(t, original, "run 1, pass 0"), "run 1, pass 1")
}

func TestTestRecord_2(t *testing.T) {
	original := genRandomTestRecord(2)
	roundTripTestRecord(t, roundTripTestRecord(t, original, "run 2, pass 0"), "run 2, pass 1")
}



