/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package test;

import (
	"github.com/BBN-D/avro-golang-example/src"
)
import "errors"

// KindSchema is an AvroSchema object
var KindSchema = src.AvroRegisterSchema(KindFromRecord, "{\"type\":\"enum\",\"name\":\"Kind\",\"namespace\":\"org.apache.avro.test\",\"doc\":\"A kind of record.\",\"symbols\":[\"FOO\",\"BAR\",\"BAZ\"],\"aliases\":[\"org.foo.KindOf\"]}")

/** A kind of record. */
type Kind struct {
	Value int // FOO, BAR, BAZ
}

// ToAvroContainer converts Kind to a byte array
func (this *Kind) ToAvroContainer() ([]byte, error) {
	return src.ToAvroContainer([]src.AvroObject{this})
}

// ToJSON converts Kind to a JSON string
func (this *Kind) ToJSON(prettyPrint bool) (string, error) {
	record, err := this.ToRecord()
	if err != nil {
		return "", errors.New("ToJSON: " + err.Error())
	}
	return record.ToJSON(prettyPrint)
}

// KindFromAvroContainer returns a slice
// of Kind objects
func KindFromAvroContainer(bytes []byte) ([]src.AvroObject, error) {
	return src.FromAvroContainer(bytes, KindSchema)
}

//
// AvroObject interface; should not need to use these directly
//

func (this *Kind) GetSchema() *src.AvroSchema {
	return KindSchema
}

func KindFromRecord(record *src.AvroRecord) (src.AvroObject, error) {
	var err error
	obj := new(Kind)
	datum, _ := src.DatumFromRecord(record)
	obj.Value, err = datum.GetEnum()
	if err != nil {
		return nil, errors.New("Kind: " + err.Error())
	}
	return obj, nil
}

func (this *Kind) ToRecord() (*src.AvroRecord, error) {
	
	datum, err := src.DatumFromEnum(this.GetSchema(), this.Value)
	if err != nil {
		return nil, errors.New("Kind: " + err.Error())
	}

	return src.RecordFromDatum(datum)
}


